# Recursive
(define (accumulate combiner null-value term a next b)
	(if (> a b)
		null-value
		(combiner (term a)
			(accumulate combiner null-value term (next a) next b))))

# Iterative
(define (accumulate combiner null-value term a next b)
	(define (iter combiner a result)
		(if (> a b)
			result
			(iter combiner (next a) (combiner (term a) result))))
	(iter combiner a null-value))

# Using sum with accumulate
(define (sum term a next b)
	(accumulate + 0 term a next b))

# Using factor with accumulate
(define (product term a next b)
	(accumulate * 1 term a next b))
